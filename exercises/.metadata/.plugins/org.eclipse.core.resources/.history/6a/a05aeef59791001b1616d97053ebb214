package school;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Collectors;

import person.Janitor;
import person.Principal;
import person.Student;
import person.Teacher;
import salary.JanitorSalary;
import salary.PrincipalSalary;

public class School {
	private Set<Student> students;
	private Set<Teacher> teachers;
	private Janitor janitor;
	private Principal principal;
	
	
	public School(Principal p, Janitor j) {
		super();
		this.students = new TreeSet <Student>();
		this.teachers = new TreeSet<Teacher>();
		principal = p;
		janitor = j;
	}


	public void addStudent(Student student) {
		students.add(student);
	}
	public void addTeacher(Teacher teacher) {
		teachers.add(teacher);
	}
	
	public Set<Student> getStudents() {
		return students;
	}

	public void setStudents(Set<Student> students) {
		this.students = students;
	}

	public Set<Teacher> getTeachers() {
		return teachers;
	}


	public void setTeachers(Set<Teacher> teachers) {
		this.teachers = teachers;
	}


	public Janitor getJanitor() {
		return janitor;
	}


	public void setJanitor(Janitor janitor) {
		this.janitor = janitor;
	}


	public Principal getPrincipal() {
		return principal;
	}


	public void setPrincipal(Principal principal) {
		this.principal = principal;
	}
	
	public List<Student> getStudentsBySubject(Integer subjectId){
		return students.stream().filter(student -> student.getSubjects().stream().anyMatch(subject -> subject.getSubjectId().equals(subjectId))).collect(Collectors.toList());
	}
	
	public Map<String, List<Student>> getGroupedStudents(){
		Map<String, List<Student>> group = new TreeMap<String, List<Student>>();

		for (Student student : students) {
		    String firstCharacter =  student.getLastName().substring(0,1);
		    
		    if (group.containsKey(firstCharacter)) {
		        group.get(firstCharacter).add(student);
		    } else {
		    	List<Student> list = new ArrayList<Student>();
		        list.add(student);
		        group.put(firstCharacter, list);
		    }
		}
		return group;
	}
	
	
	public void loadSchool() {
		
		principal = new Principal(1,"principalName","principalLastName", new Date(),new PrincipalSalary(0.1, 100.0, 4));
		janitor = new Janitor(2,"janitorName","janitorLastName", new Date(),new JanitorSalary(20.0));
		
		Subject s1 = new Subject(1, "Subject1", 5.0);
        Subject s2 = new Subject(2, "Subject2", 11.0);
        Subject s3 = new Subject(3, "Subject3", 3.0);
        Subject s4 = new Subject(4, "Subject4", 7.0);
        

        Set<Subject> subjectsTeacher1 = new TreeSet<Subject>();
        subjectsTeacher1.add(s1);
        subjectsTeacher1.add(s2);
        subjectsTeacher1.add(s3);
        
        Set<Subject> subjectsTeacher2 = new TreeSet<Subject>();
        subjectsTeacher1.add(s2);
        subjectsTeacher1.add(s3);
        subjectsTeacher1.add(s4);
        
        Set<Subject> subjectsTeacher4 = new TreeSet<Subject>();
        subjectsTeacher1.add(s4);
        subjectsTeacher1.add(s3);
        
        
        
        teachers.add(new Teacher(3, "teacher1name", "teacher1Lastname", new Date()));
        teachers.add(new Teacher(4, "teacher2name", "teacher2Lastname", new Date()));
        teachers.add(new Teacher(5, "teacher3name", "teacher3Lastname", new Date()));
        
        
        students.add(new Student(6, "student1name", "student1LastName", new Date()));
        students.add(new Student(7, "student2name", "student2LastName", new Date()));
        students.add(new Student(8, "student3name", "student3LastName", new Date()));
        students.add(new Student(9, "student4name", "student4LastName", new Date()));
        students.add(new Student(10, "student5name", "student5LastName", new Date()));
        students.add(new Student(11, "student6name", "student6LastName", new Date()));
		
		
	
	}
	
	
	

}
